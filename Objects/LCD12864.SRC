; .\Objects\LCD12864.SRC generated from: C语言版本\LCD12864.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE C语言版本\LCD12864.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\LCD12864.lst) TABS(2) SRC(.\Objects\LCD12864.SRC)

$NOMOD51

NAME	LCD12864

CCF2	BIT	0D8H.2
TB80	BIT	098H.3
SPI0CKR	DATA	09DH
CCF3	BIT	0D8H.3
P0	DATA	080H
SPIEN	BIT	0F8H.0
CCF4	BIT	0D8H.4
SM00	BIT	098H.7
P1	DATA	090H
AA	BIT	0C0H.2
SM10	BIT	098H.6
WDTCN	DATA	0FFH
P2	DATA	0A0H
SM20	BIT	098H.5
ADC0CF	DATA	0BCH
P3	DATA	0B0H
AC	BIT	0D0H.6
ADC1CF	DATA	0ABH
P4	DATA	084H
EIE1	DATA	0E6H
P5	DATA	085H
EA	BIT	0A8H.7
EIE2	DATA	0E7H
P6	DATA	086H
P7	DATA	096H
PSCTL	DATA	08FH
MSTEN	BIT	0F8H.1
CF	BIT	0D8H.7
ADC0CN	DATA	0E8H
DAC0CN	DATA	0D4H
DAC1CN	DATA	0D7H
ADC1CN	DATA	0AAH
P0MDOUT	DATA	0A4H
P1MDOUT	DATA	0A5H
IE	DATA	0A8H
P2MDOUT	DATA	0A6H
P3MDOUT	DATA	0A7H
TMR3RLH	DATA	093H
EIP1	DATA	0F6H
EIP2	DATA	0F7H
PCA0CPH0	DATA	0FAH
PCA0CPH1	DATA	0FBH
P3IF	DATA	0ADH
TMR3RLL	DATA	092H
PCA0CPH2	DATA	0FCH
CR	BIT	0D8H.6
PCA0CPH3	DATA	0FDH
EXF2	BIT	0C8H.6
REN0	BIT	098H.4
PCA0CPH4	DATA	0FEH
PCA0CPL0	DATA	0EAH
EMI0CF	DATA	0A3H
PCA0CPL1	DATA	0EBH
PCA0CPM0	DATA	0DAH
PCA0MD	DATA	0D9H
PCA0CN	DATA	0D8H
PCA0CPL2	DATA	0ECH
PCA0CPM1	DATA	0DBH
PCA0CPL3	DATA	0EDH
PCA0CPM2	DATA	0DCH
IP	DATA	0B8H
PCA0CPL4	DATA	0EEH
PCA0CPM3	DATA	0DDH
PCA0CPM4	DATA	0DEH
TXBSY	BIT	0F8H.3
CY	BIT	0D0H.7
SI	BIT	0C0H.3
XBR0	DATA	0E1H
SADEN0	DATA	0B9H
XBR1	DATA	0E2H
EMI0CN	DATA	0AFH
SADEN1	DATA	0AEH
XBR2	DATA	0E3H
REF0CN	DATA	0D1H
SADDR0	DATA	0A9H
SADDR1	DATA	0F3H
AMX0CF	DATA	0BAH
AD0INT	BIT	0E8H.5
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
RCAP4H	DATA	0E5H
EMI0TC	DATA	0A1H
OV	BIT	0D0H.2
SMB0CN	DATA	0C0H
RCAP2L	DATA	0CAH
MODF	BIT	0F8H.5
RCAP4L	DATA	0E4H
SMB0CR	DATA	0CFH
CPT0CN	DATA	09EH
P1MDIN	DATA	0BDH
CPT1CN	DATA	09FH
SPI0CN	DATA	0F8H
PCON	DATA	087H
SPIF	BIT	0F8H.7
P74OUT	DATA	0B5H
TMOD	DATA	089H
TCON	DATA	088H
WCOL	BIT	0F8H.6
AMX0SL	DATA	0BBH
AMX1SL	DATA	0ACH
TMR3CN	DATA	091H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
DAC0H	DATA	0D3H
ADC0H	DATA	0BFH
OSCICN	DATA	0B2H
DAC1H	DATA	0D6H
SMBFTE	BIT	0C0H.1
BUSY	BIT	0C0H.7
DAC0L	DATA	0D2H
ADC0L	DATA	0BEH
DAC1L	DATA	0D5H
LCD_EN	BIT	0A0H.7
ACC	DATA	0E0H
ES0	BIT	0A8H.4
AD0EN	BIT	0E8H.7
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
SMBTOE	BIT	0C0H.0
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
IT0	BIT	088H.0
PCA0H	DATA	0F9H
TH1	DATA	08DH
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
TH4	DATA	0F5H
OSCXCN	DATA	0B1H
TL0	DATA	08AH
PCA0L	DATA	0E9H
TL1	DATA	08BH
TL2	DATA	0CCH
PT0	BIT	0B8H.1
TL4	DATA	0F4H
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
AD0TM	BIT	0E8H.6
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
LCD_RS	BIT	0A0H.5
PX1	BIT	0B8H.2
SLVSEL	BIT	0F8H.2
DPH	DATA	083H
LCD_RW	BIT	0A0H.6
RCLK0	BIT	0C8H.5
ADC0GTH	DATA	0C5H
TCLK0	BIT	0C8H.4
DPL	DATA	082H
ADC0GTL	DATA	0C4H
SBUF0	DATA	099H
SBUF1	DATA	0F2H
ADC0LTH	DATA	0C7H
EXEN2	BIT	0C8H.3
RSTSRC	DATA	0EFH
FLACL	DATA	0B7H
CPRL2	BIT	0C8H.0
SCON0	DATA	098H
SCON1	DATA	0F1H
ADC0LTL	DATA	0C6H
T2CON	DATA	0C8H
STA	BIT	0C0H.5
T4CON	DATA	0C9H
SMB0ADR	DATA	0C3H
SMB0DAT	DATA	0C2H
SPI0CFG	DATA	09AH
TMR3H	DATA	095H
CKCON	DATA	08EH
RXOVRN	BIT	0F8H.4
D0	BIT	080H.0
TMR3L	DATA	094H
D1	BIT	080H.1
AD0LJST	BIT	0E8H.0
D2	BIT	080H.2
F0	BIT	0D0H.5
FLSCL	DATA	0B6H
D3	BIT	080H.3
AD0CM0	BIT	0E8H.2
F1	BIT	0D0H.1
STO	BIT	0C0H.4
ENSMB	BIT	0C0H.6
D4	BIT	080H.4
AD0CM1	BIT	0E8H.3
SPI0DAT	DATA	09BH
D5	BIT	080H.5
D6	BIT	080H.6
AD0WINT	BIT	0E8H.1
ADC1	DATA	09CH
D7	BIT	080H.7
AD0BUSY	BIT	0E8H.4
PSW	DATA	0D0H
CCF0	BIT	0D8H.0
RB80	BIT	098H.2
SMB0STA	DATA	0C1H
CCF1	BIT	0D8H.1
?PR?set_LCD_read_write?LCD12864          SEGMENT CODE 
?PR?wait_lcd_not_busy?LCD12864           SEGMENT CODE 
?PR?_lcd_wcmd?LCD12864                   SEGMENT CODE 
?PR?_lcd_wdat?LCD12864                   SEGMENT CODE 
?PR?clear?LCD12864   SEGMENT CODE 
?PR?lcd_init?LCD12864                    SEGMENT CODE 
?PR?_set_xy?LCD12864 SEGMENT CODE 
?DT?_set_xy?LCD12864 SEGMENT DATA OVERLAYABLE 
?PR?_print?LCD12864  SEGMENT CODE 
?DT?_print?LCD12864  SEGMENT DATA OVERLAYABLE 
?PR?_print_char?LCD12864                 SEGMENT CODE 
?DT?_print_char?LCD12864                 SEGMENT DATA OVERLAYABLE 
?PR?_Draw_PM?LCD12864                    SEGMENT CODE 
?DT?_Draw_PM?LCD12864                    SEGMENT DATA OVERLAYABLE 
	EXTRN	CODE (_delay_ms)
	EXTRN	CODE (?C?CLDPTR)
	PUBLIC	_Draw_PM
	PUBLIC	_print_char
	PUBLIC	_print
	PUBLIC	_set_xy
	PUBLIC	lcd_init
	PUBLIC	clear
	PUBLIC	_lcd_wdat
	PUBLIC	_lcd_wcmd
	PUBLIC	wait_lcd_not_busy
	PUBLIC	set_LCD_read_write

	RSEG  ?DT?_Draw_PM?LCD12864
?_Draw_PM?BYTE:
        ptr?951:   DS   3
	ORG  3
          i?952:   DS   1
	ORG  4
          j?953:   DS   1
	ORG  5
          k?954:   DS   1

	RSEG  ?DT?_set_xy?LCD12864
?_set_xy?BYTE:
       xpos?642:   DS   1

	RSEG  ?DT?_print?LCD12864
?_print?BYTE:
        str?746:   DS   3

	RSEG  ?DT?_print_char?LCD12864
?_print_char?BYTE:
          a?850:   DS   1
; // 包含LCD12864液晶显示屏的头文件
; #include "LCD12864.h"
; 
; // 定义设置LCD读写模式的函数
; void set_LCD_read_write(void)

	RSEG  ?PR?set_LCD_read_write?LCD12864
set_LCD_read_write:
			; SOURCE LINE # 5
; {
			; SOURCE LINE # 6
; 	// 如果LCD_RW为0，表示写模式，将LCD_read_write设为0xFF，推挽输出
; 	if(LCD_RW==0)
			; SOURCE LINE # 8
	JB   	LCD_RW,?C0001
; 	{
			; SOURCE LINE # 9
; 		LCD_read_write= 0xFF;
			; SOURCE LINE # 10
	MOV  	P0MDOUT,#0FFH
; 	}
			; SOURCE LINE # 11
	RET  	
?C0001:
; 	// 否则，表示读模式，将LCD_read_write设为0x00，将LCD_data设为0xFF，漏开写1作为输入
; 	else
; 	{
			; SOURCE LINE # 14
; 		LCD_read_write= 0x00;
			; SOURCE LINE # 15
	CLR  	A
	MOV  	P0MDOUT,A
; 		LCD_data=0xFF;
			; SOURCE LINE # 16
	MOV  	P0,#0FFH
; 	}
			; SOURCE LINE # 17
; }
			; SOURCE LINE # 18
?C0003:
	RET  	
; END OF set_LCD_read_write

; 
; /*
; * 功  能：等待LCD12864空闲
; * 参  数：无
; * 返回值：无
; */
; void wait_lcd_not_busy()

	RSEG  ?PR?wait_lcd_not_busy?LCD12864
wait_lcd_not_busy:
			; SOURCE LINE # 25
; {                          
			; SOURCE LINE # 26
; 	// 将LCD_RS设为0，表示选择指令寄存器
; 	LCD_RS = 0;
			; SOURCE LINE # 28
	CLR  	LCD_RS
; 	// 将LCD_RW设为1，表示读取状态
; 	LCD_RW = 1;
			; SOURCE LINE # 30
	SETB 	LCD_RW
; 	// 调用设置LCD读写模式的函数
; 	set_LCD_read_write();
			; SOURCE LINE # 32
	LCALL	set_LCD_read_write
; 	// 将LCD_EN设为1
; 	LCD_EN = 1;
			; SOURCE LINE # 34
	SETB 	LCD_EN
?C0004:
; 	// 等待D7为0，表示LCD空闲
; 	while(D7);
			; SOURCE LINE # 36
	JB   	D7,?C0004
; 	// 将LCD_EN设为0
; 	LCD_EN = 0;
			; SOURCE LINE # 38
	CLR  	LCD_EN
; }
			; SOURCE LINE # 39
	RET  	
; END OF wait_lcd_not_busy

; 
; /*
; * 功  能：写指令到LCD
; * 参  数：要写入的指令
; * 返回值：无
; */
; void lcd_wcmd(uchar cmd)

	RSEG  ?PR?_lcd_wcmd?LCD12864
_lcd_wcmd:
	USING	0
			; SOURCE LINE # 46
;---- Variable 'cmd?240' assigned to Register 'R7' ----
; {                          
			; SOURCE LINE # 47
; 	// 调用等待LCD空闲的函数
; 	wait_lcd_not_busy();
			; SOURCE LINE # 49
	LCALL	wait_lcd_not_busy
; 	// 将LCD_RS设为0，表示选择指令寄存器
; 	LCD_RS = 0;
			; SOURCE LINE # 51
	CLR  	LCD_RS
; 	// 将LCD_RW设为0，表示写入数据
; 	LCD_RW = 0;
			; SOURCE LINE # 53
	CLR  	LCD_RW
; 	// 调用设置LCD读写模式的函数
; 	set_LCD_read_write();
			; SOURCE LINE # 55
	LCALL	set_LCD_read_write
; 	// 将要写入的指令赋值给LCD_data
; 	LCD_data = cmd;
			; SOURCE LINE # 57
	MOV  	P0,R7
; 	// 延时1毫秒
; 	delay_ms(1);
			; SOURCE LINE # 59
	MOV  	R7,#01H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 将LCD_EN设为1
; 	LCD_EN = 1;
			; SOURCE LINE # 61
	SETB 	LCD_EN
; 	// 延时1毫秒
; 	delay_ms(1);
			; SOURCE LINE # 63
	MOV  	R7,#01H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 将LCD_EN设为0
; 	LCD_EN = 0;  
			; SOURCE LINE # 65
	CLR  	LCD_EN
; }
			; SOURCE LINE # 66
	RET  	
; END OF _lcd_wcmd

; 
; /*
; * 功  能：LCD写数据
; * 参  数：要写入的数据
; * 返回值：无
; */
; void lcd_wdat(uchar dat)

	RSEG  ?PR?_lcd_wdat?LCD12864
L?0042:
	USING	0
	DEC  	A
	MOV  	R1,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
_lcd_wdat:
	USING	0
			; SOURCE LINE # 73
;---- Variable 'dat?341' assigned to Register 'R7' ----
; {                          
			; SOURCE LINE # 74
; 	// 调用等待LCD空闲的函数
; 	wait_lcd_not_busy();
			; SOURCE LINE # 76
	LCALL	wait_lcd_not_busy
; 	// 将LCD_RS设为1，表示选择数据寄存器
; 	LCD_RS = 1;
			; SOURCE LINE # 78
	SETB 	LCD_RS
; 	// 将LCD_RW设为0，表示写入数据
; 	LCD_RW = 0;
			; SOURCE LINE # 80
	CLR  	LCD_RW
; 	// 调用设置LCD读写模式的函数
; 	set_LCD_read_write();
			; SOURCE LINE # 82
	LCALL	set_LCD_read_write
; 	// 将要写入的数据赋值给LCD_data
; 	LCD_data = dat;
			; SOURCE LINE # 84
	MOV  	P0,R7
; 	// 延时1毫秒
; 	delay_ms(1);
			; SOURCE LINE # 86
	MOV  	R7,#01H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 将LCD_EN设为1
; 	LCD_EN = 1;
			; SOURCE LINE # 88
	SETB 	LCD_EN
; 	// 延时1毫秒
; 	delay_ms(1);
			; SOURCE LINE # 90
	MOV  	R7,#01H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 将LCD_EN设为0
; 	LCD_EN = 0;
			; SOURCE LINE # 92
	CLR  	LCD_EN
; }
			; SOURCE LINE # 93
	RET  	
; END OF _lcd_wdat

; 
; // 定义清除LCD显示内容的函数
; void clear(void)

	RSEG  ?PR?clear?LCD12864
clear:
	USING	0
			; SOURCE LINE # 96
; {
			; SOURCE LINE # 97
; 	// 写入0x01指令，表示清除LCD的显示内容
; 	lcd_wcmd(0x01);      
			; SOURCE LINE # 99
	MOV  	R7,#01H
	LJMP 	_lcd_wcmd
; END OF clear

; }
; 
; /*
; * 功  能：LCD初始化
; * 参  数：无
; * 返回值：无
; */
; void lcd_init(void)

	RSEG  ?PR?lcd_init?LCD12864
lcd_init:
	USING	0
			; SOURCE LINE # 107
; { 
			; SOURCE LINE # 108
; 	// 写入0x34指令，表示打开扩充指令操作
; 	lcd_wcmd(0x34);      
			; SOURCE LINE # 110
	MOV  	R7,#034H
	LCALL	_lcd_wcmd
; 	// 延时5毫秒
; 	delay_ms(5);
			; SOURCE LINE # 112
	MOV  	R7,#05H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 写入0x30指令，表示打开基本指令操作
; 	lcd_wcmd(0x30);      
			; SOURCE LINE # 114
	MOV  	R7,#030H
	LCALL	_lcd_wcmd
; 	// 延时5毫秒
; 	delay_ms(5);
			; SOURCE LINE # 116
	MOV  	R7,#05H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 写入0x0C指令，表示显示开，关光标
; 	lcd_wcmd(0x0C);      
			; SOURCE LINE # 118
	MOV  	R7,#0CH
	LCALL	_lcd_wcmd
; 	// 延时5毫秒
; 	delay_ms(5);
			; SOURCE LINE # 120
	MOV  	R7,#05H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_delay_ms
; 	// 写入0x01指令，表示清除LCD的显示内容
; 	lcd_wcmd(0x01);      
			; SOURCE LINE # 122
	MOV  	R7,#01H
	LCALL	_lcd_wcmd
; 	// 延时5毫秒
; 	delay_ms(5);
			; SOURCE LINE # 124
	MOV  	R7,#05H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LJMP 	_delay_ms
; END OF lcd_init

; }
; /*设置显示位置  xpos(0~7),ypos(1~4)*/
; void set_xy(unsigned char xpos,unsigned char ypos)

	RSEG  ?PR?_set_xy?LCD12864
_set_xy:
	USING	0
			; SOURCE LINE # 127
	MOV  	xpos?642,R7
;---- Variable 'ypos?643' assigned to Register 'R5' ----
; {
			; SOURCE LINE # 128
; 	// 根据ypos的值，选择不同的行地址
; 	switch(ypos)
			; SOURCE LINE # 130
	MOV  	A,R5
	ADD  	A,#0FEH
	JZ   	?C0013
	DEC  	A
	JZ   	?C0014
	DEC  	A
	JZ   	?C0015
	ADD  	A,#03H
	JNZ  	?C0017
; 	{
			; SOURCE LINE # 131
; 		case 1:
			; SOURCE LINE # 132
?C0012:
; 			// 写入0x80|xpos指令，表示设置第一行的显示位置
; 			lcd_wcmd(0X80|xpos);break;
			; SOURCE LINE # 134
	MOV  	A,xpos?642
	ORL  	A,#080H
	SJMP 	?C0040
; 		case 2:
			; SOURCE LINE # 135
?C0013:
; 			// 写入0x90|xpos指令，表示设置第二行的显示位置
; 			lcd_wcmd(0X90|xpos);break;
			; SOURCE LINE # 137
	MOV  	A,xpos?642
	ORL  	A,#090H
?C0038:
	SJMP 	?C0040
; 		case 3:
			; SOURCE LINE # 138
?C0014:
; 			// 写入0x88|xpos指令，表示设置第三行的显示位置
; 			lcd_wcmd(0X88|xpos);break;
			; SOURCE LINE # 140
	MOV  	A,xpos?642
	ORL  	A,#088H
?C0039:
	SJMP 	?C0040
; 		case 4:
			; SOURCE LINE # 141
?C0015:
; 			// 写入0x98|xpos指令，表示设置第四行的显示位置
; 			lcd_wcmd(0X98|xpos);break;
			; SOURCE LINE # 143
	MOV  	A,xpos?642
	ORL  	A,#098H
?C0040:
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 		default:
			; SOURCE LINE # 144
; 			// 其他情况，不做任何操作
; 			break;
			; SOURCE LINE # 146
; 	}
			; SOURCE LINE # 147
; }
			; SOURCE LINE # 148
?C0017:
	RET  	
; END OF _set_xy

; /*在指定位置显示字符串*/
; void print(unsigned char x,unsigned char y,const unsigned char* str)

	RSEG  ?PR?_print?LCD12864
_print:
	USING	0
			; SOURCE LINE # 150
	MOV  	str?746,R3
	MOV  	str?746+01H,R2
	MOV  	str?746+02H,R1
;---- Variable 'y?745' assigned to Register 'R5' ----
;---- Variable 'x?744' assigned to Register 'R7' ----
; { 
			; SOURCE LINE # 151
; 	// 定义一个无符号字符变量，用于存储字符串中的字符
; 	unsigned char lcd_temp; 
; 	// 调用设置显示位置的函数
; 	set_xy(x,y);
			; SOURCE LINE # 155
	LCALL	_set_xy
; 	// 取出字符串中的第一个字符
; 	lcd_temp=*str;
			; SOURCE LINE # 157
	MOV  	R3,str?746
	MOV  	R2,str?746+01H
	MOV  	R1,str?746+02H
;---- Variable 'lcd_temp?747' assigned to Register 'R7' ----
	SJMP 	?C0041
?C0018:
; 		// 当字符不为0x00时，表示字符串未结束
; 		while(lcd_temp != 0x00) 
			; SOURCE LINE # 159
	MOV  	A,R7
	JZ   	?C0020
; 		{ 
			; SOURCE LINE # 160
; 		// 在LCD上写入该字符
; 		lcd_wdat(lcd_temp);
			; SOURCE LINE # 162
	LCALL	_lcd_wdat
; 		// 取出字符串中的下一个字符
; 		lcd_temp=*(++str);
			; SOURCE LINE # 164
	MOV  	R3,str?746
	INC  	str?746+02H
	MOV  	A,str?746+02H
	JNZ  	?C0035
	INC  	str?746+01H
?C0035:
	MOV  	R1,A
	MOV  	R2,str?746+01H
?C0041:
	LCALL	?C?CLDPTR
	MOV  	R7,A
; 		} 
			; SOURCE LINE # 165
	SJMP 	?C0018
; }
			; SOURCE LINE # 166
?C0020:
	RET  	
; END OF _print

; /*在指定位置显示字符*/
; void print_char(unsigned char x,unsigned char y,unsigned char a)

	RSEG  ?PR?_print_char?LCD12864
_print_char:
	USING	0
			; SOURCE LINE # 168
	MOV  	a?850,R3
;---- Variable 'y?849' assigned to Register 'R5' ----
;---- Variable 'x?848' assigned to Register 'R7' ----
; { 
			; SOURCE LINE # 169
; 	// 调用设置显示位置的函数
; 	set_xy(x,y);
			; SOURCE LINE # 171
	LCALL	_set_xy
; 	// 在LCD上写入该字符
; 	lcd_wdat(a);
			; SOURCE LINE # 173
	MOV  	R7,a?850
	LJMP 	_lcd_wdat
; END OF _print_char

; }
; /*
; * 功  能：在整个液晶屏幕上画图
; * 参  数：图片的点阵数据
; * 返回值：无
; */
; void Draw_PM(const unsigned  char *ptr)

	RSEG  ?PR?_Draw_PM?LCD12864
_Draw_PM:
	USING	0
			; SOURCE LINE # 180
	MOV  	ptr?951,R3
	MOV  	ptr?951+01H,R2
	MOV  	ptr?951+02H,R1
; {
			; SOURCE LINE # 181
; 	// 定义三个无符号字符变量，用于作为循环计数器
; 	uchar i, j, k;
; 	// 写入0x34指令，表示打开扩展指令集
; 	lcd_wcmd(0x34);        
			; SOURCE LINE # 185
	MOV  	R7,#034H
	LCALL	_lcd_wcmd
; 	// 将i设为0x80，表示从第一行开始
; 	i = 0x80;
			; SOURCE LINE # 187
	MOV  	i?952,#080H
; 	            
; 	// 先写上半屏
; 	// 对于每一行，共32行
; 	for(j=0; j<32; j++)
			; SOURCE LINE # 191
	CLR  	A
	MOV  	j?953,A
?C0022:
; 	{
			; SOURCE LINE # 192
; 		// 写入i指令，表示设置行地址
; 		lcd_wcmd(i++);
			; SOURCE LINE # 194
	MOV  	R7,i?952
	INC  	i?952
	LCALL	_lcd_wcmd
; 		// 写入0x80指令，表示设置列地址为0
; 		lcd_wcmd(0x80);
			; SOURCE LINE # 196
	MOV  	R7,#080H
	LCALL	_lcd_wcmd
; 		// 对于每一列，共8*2=16列
; 		for(k=0; k<16; k++)
			; SOURCE LINE # 198
	CLR  	A
	MOV  	k?954,A
?C0025:
; 		{
			; SOURCE LINE # 199
; 			// 在LCD上写入图片的点阵数据
; 			lcd_wdat(*ptr++);
			; SOURCE LINE # 201
	MOV  	R3,ptr?951
	INC  	ptr?951+02H
	MOV  	A,ptr?951+02H
	MOV  	R2,ptr?951+01H
	JNZ  	?C0036
	INC  	ptr?951+01H
?C0036:
	LCALL	L?0042
; 		}
			; SOURCE LINE # 202
	INC  	k?954
	MOV  	A,k?954
	CLR  	C
	SUBB 	A,#010H
	JC   	?C0025
; 	}
			; SOURCE LINE # 203
?C0024:
	INC  	j?953
	MOV  	A,j?953
	CLR  	C
	SUBB 	A,#020H
	JC   	?C0022
?C0023:
; 	// 将i设为0x80，表示从第一行开始
; 	i = 0x80;
			; SOURCE LINE # 205
	MOV  	i?952,#080H
; 	// 再写下半屏
; 	// 对于每一行，共32行
; 	for(j=0; j<32; j++)
			; SOURCE LINE # 208
	CLR  	A
	MOV  	j?953,A
?C0028:
; 	{
			; SOURCE LINE # 209
; 		// 写入i指令，表示设置行地址
; 		lcd_wcmd(i++);
			; SOURCE LINE # 211
	MOV  	R7,i?952
	INC  	i?952
	LCALL	_lcd_wcmd
; 		// 写入0x88指令，表示设置列地址为8
; 		lcd_wcmd(0x88);	   
			; SOURCE LINE # 213
	MOV  	R7,#088H
	LCALL	_lcd_wcmd
; 		// 对于每一列，共8*2=16列
; 		for(k=0; k<16; k++)
			; SOURCE LINE # 215
	CLR  	A
	MOV  	k?954,A
?C0031:
; 		{
			; SOURCE LINE # 216
; 			// 在LCD上写入图片的点阵数据
; 			lcd_wdat(*ptr++);
			; SOURCE LINE # 218
	MOV  	R3,ptr?951
	INC  	ptr?951+02H
	MOV  	A,ptr?951+02H
	MOV  	R2,ptr?951+01H
	JNZ  	?C0037
	INC  	ptr?951+01H
?C0037:
	LCALL	L?0042
; 		} 
			; SOURCE LINE # 219
	INC  	k?954
	MOV  	A,k?954
	CLR  	C
	SUBB 	A,#010H
	JC   	?C0031
; 	}  
			; SOURCE LINE # 220
?C0030:
	INC  	j?953
	MOV  	A,j?953
	CLR  	C
	SUBB 	A,#020H
	JC   	?C0028
?C0029:
; 	// 写入0x36指令，表示打开绘图显示
; 	lcd_wcmd(0x36);        
			; SOURCE LINE # 222
	MOV  	R7,#036H
	LCALL	_lcd_wcmd
; 	// 写入0x30指令，表示回到基本指令集
; 	lcd_wcmd(0x30);        
			; SOURCE LINE # 224
	MOV  	R7,#030H
	LJMP 	_lcd_wcmd
; END OF _Draw_PM

	END
