; .\Objects\guessing_game.SRC generated from: C语言版本\guessing_game.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE C语言版本\guessing_game.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\guessing_game.lst) TABS(2) SRC(.\Objects\guessing_game.SRC)

$NOMOD51

NAME	GUESSING_GAME

CCF2	BIT	0D8H.2
TB80	BIT	098H.3
SPI0CKR	DATA	09DH
CCF3	BIT	0D8H.3
P0	DATA	080H
SPIEN	BIT	0F8H.0
CCF4	BIT	0D8H.4
SM00	BIT	098H.7
P1	DATA	090H
AA	BIT	0C0H.2
SM10	BIT	098H.6
WDTCN	DATA	0FFH
P2	DATA	0A0H
SM20	BIT	098H.5
ADC0CF	DATA	0BCH
P3	DATA	0B0H
AC	BIT	0D0H.6
ADC1CF	DATA	0ABH
P4	DATA	084H
EIE1	DATA	0E6H
P5	DATA	085H
EA	BIT	0A8H.7
EIE2	DATA	0E7H
P6	DATA	086H
P7	DATA	096H
PSCTL	DATA	08FH
MSTEN	BIT	0F8H.1
CF	BIT	0D8H.7
ADC0CN	DATA	0E8H
DAC0CN	DATA	0D4H
DAC1CN	DATA	0D7H
ADC1CN	DATA	0AAH
P0MDOUT	DATA	0A4H
P1MDOUT	DATA	0A5H
IE	DATA	0A8H
P2MDOUT	DATA	0A6H
P3MDOUT	DATA	0A7H
TMR3RLH	DATA	093H
EIP1	DATA	0F6H
EIP2	DATA	0F7H
PCA0CPH0	DATA	0FAH
PCA0CPH1	DATA	0FBH
P3IF	DATA	0ADH
TMR3RLL	DATA	092H
PCA0CPH2	DATA	0FCH
CR	BIT	0D8H.6
PCA0CPH3	DATA	0FDH
EXF2	BIT	0C8H.6
REN0	BIT	098H.4
PCA0CPH4	DATA	0FEH
PCA0CPL0	DATA	0EAH
EMI0CF	DATA	0A3H
PCA0CPL1	DATA	0EBH
PCA0CPM0	DATA	0DAH
PCA0MD	DATA	0D9H
PCA0CN	DATA	0D8H
PCA0CPL2	DATA	0ECH
PCA0CPM1	DATA	0DBH
PCA0CPL3	DATA	0EDH
PCA0CPM2	DATA	0DCH
IP	DATA	0B8H
PCA0CPL4	DATA	0EEH
PCA0CPM3	DATA	0DDH
PCA0CPM4	DATA	0DEH
TXBSY	BIT	0F8H.3
CY	BIT	0D0H.7
SI	BIT	0C0H.3
XBR0	DATA	0E1H
SADEN0	DATA	0B9H
XBR1	DATA	0E2H
EMI0CN	DATA	0AFH
SADEN1	DATA	0AEH
XBR2	DATA	0E3H
REF0CN	DATA	0D1H
SADDR0	DATA	0A9H
SADDR1	DATA	0F3H
AMX0CF	DATA	0BAH
AD0INT	BIT	0E8H.5
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
RCAP4H	DATA	0E5H
EMI0TC	DATA	0A1H
OV	BIT	0D0H.2
SMB0CN	DATA	0C0H
RCAP2L	DATA	0CAH
MODF	BIT	0F8H.5
RCAP4L	DATA	0E4H
SMB0CR	DATA	0CFH
CPT0CN	DATA	09EH
P1MDIN	DATA	0BDH
CPT1CN	DATA	09FH
SPI0CN	DATA	0F8H
PCON	DATA	087H
SPIF	BIT	0F8H.7
P74OUT	DATA	0B5H
TMOD	DATA	089H
TCON	DATA	088H
WCOL	BIT	0F8H.6
AMX0SL	DATA	0BBH
AMX1SL	DATA	0ACH
TMR3CN	DATA	091H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
DAC0H	DATA	0D3H
ADC0H	DATA	0BFH
OSCICN	DATA	0B2H
DAC1H	DATA	0D6H
SMBFTE	BIT	0C0H.1
BUSY	BIT	0C0H.7
DAC0L	DATA	0D2H
ADC0L	DATA	0BEH
DAC1L	DATA	0D5H
LCD_EN	BIT	0A0H.7
ACC	DATA	0E0H
ES0	BIT	0A8H.4
AD0EN	BIT	0E8H.7
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
SMBTOE	BIT	0C0H.0
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
IT0	BIT	088H.0
PCA0H	DATA	0F9H
TH1	DATA	08DH
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
TH4	DATA	0F5H
OSCXCN	DATA	0B1H
TL0	DATA	08AH
PCA0L	DATA	0E9H
TL1	DATA	08BH
TL2	DATA	0CCH
PT0	BIT	0B8H.1
TL4	DATA	0F4H
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
AD0TM	BIT	0E8H.6
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
LCD_RS	BIT	0A0H.5
PX1	BIT	0B8H.2
SLVSEL	BIT	0F8H.2
DPH	DATA	083H
LCD_RW	BIT	0A0H.6
RCLK0	BIT	0C8H.5
ADC0GTH	DATA	0C5H
TCLK0	BIT	0C8H.4
DPL	DATA	082H
ADC0GTL	DATA	0C4H
SBUF0	DATA	099H
SBUF1	DATA	0F2H
ADC0LTH	DATA	0C7H
EXEN2	BIT	0C8H.3
RSTSRC	DATA	0EFH
FLACL	DATA	0B7H
CPRL2	BIT	0C8H.0
SCON0	DATA	098H
SCON1	DATA	0F1H
ADC0LTL	DATA	0C6H
T2CON	DATA	0C8H
STA	BIT	0C0H.5
T4CON	DATA	0C9H
SMB0ADR	DATA	0C3H
SMB0DAT	DATA	0C2H
SPI0CFG	DATA	09AH
TMR3H	DATA	095H
CKCON	DATA	08EH
RXOVRN	BIT	0F8H.4
D0	BIT	080H.0
TMR3L	DATA	094H
D1	BIT	080H.1
AD0LJST	BIT	0E8H.0
D2	BIT	080H.2
F0	BIT	0D0H.5
FLSCL	DATA	0B6H
D3	BIT	080H.3
AD0CM0	BIT	0E8H.2
F1	BIT	0D0H.1
STO	BIT	0C0H.4
ENSMB	BIT	0C0H.6
D4	BIT	080H.4
AD0CM1	BIT	0E8H.3
SPI0DAT	DATA	09BH
D5	BIT	080H.5
D6	BIT	080H.6
AD0WINT	BIT	0E8H.1
ADC1	DATA	09CH
D7	BIT	080H.7
AD0BUSY	BIT	0E8H.4
PSW	DATA	0D0H
CCF0	BIT	0D8H.0
RB80	BIT	098H.2
SMB0STA	DATA	0C1H
CCF1	BIT	0D8H.1
?PR?check_digits?GUESSING_GAME           SEGMENT CODE 
?PR?correct?GUESSING_GAME                SEGMENT CODE 
?PR?error?GUESSING_GAME                  SEGMENT CODE 
?PR?win?GUESSING_GAME                    SEGMENT CODE 
?PR?lose?GUESSING_GAME                   SEGMENT CODE 
?PR?guess_once?GUESSING_GAME             SEGMENT CODE 
?DT?guess_once?GUESSING_GAME             SEGMENT DATA OVERLAYABLE 
?BI?guess_once?GUESSING_GAME             SEGMENT BIT OVERLAYABLE 
?PR?guess_one_level?GUESSING_GAME        SEGMENT CODE 
?BI?guess_one_level?GUESSING_GAME        SEGMENT BIT OVERLAYABLE 
?PR?main_menu?GUESSING_GAME              SEGMENT CODE 
?PR?mode_select?GUESSING_GAME            SEGMENT CODE 
?PR?begin_select?GUESSING_GAME           SEGMENT CODE 
?PR?mode1?GUESSING_GAME                  SEGMENT CODE 
?DT?mode1?GUESSING_GAME                  SEGMENT DATA OVERLAYABLE 
?PR?mode2?GUESSING_GAME                  SEGMENT CODE 
?PR?mode3?GUESSING_GAME                  SEGMENT CODE 
?PR?acknowledgement?GUESSING_GAME        SEGMENT CODE 
?PR?gussing_game?GUESSING_GAME           SEGMENT CODE 
?PR?games?GUESSING_GAME                  SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?CO?GUESSING_GAME    SEGMENT CODE 
?XD?GUESSING_GAME    SEGMENT XDATA 
?DT?GUESSING_GAME    SEGMENT DATA 
	EXTRN	CODE (display_error)
	EXTRN	CODE (display_input)
	EXTRN	CODE (display_lose)
	EXTRN	CODE (kscan)
	EXTRN	CODE (display_main_menu)
	EXTRN	CODE (input_digits)
	EXTRN	CODE (display_acknowledgement)
	EXTRN	CODE (input_display_time)
	EXTRN	XDATA (inputs)
	EXTRN	CODE (rand)
	EXTRN	CODE (display_win)
	EXTRN	CODE (input_bits)
	EXTRN	CODE (display_begin_select)
	EXTRN	CODE (display_random_digits)
	EXTRN	CODE (display_correct)
	EXTRN	CODE (display_gussing_game)
	EXTRN	CODE (display_mode_select)
	EXTRN	CODE (f_or_e)
	EXTRN	CODE (display_time_select)
	EXTRN	CODE (display_bits_select)
	EXTRN	CODE (?C?SIDIV)
	PUBLIC	random_digits
	PUBLIC	bits
	PUBLIC	level_bits
	PUBLIC	display_time
	PUBLIC	level_display_time
	PUBLIC	digits
	PUBLIC	games
	PUBLIC	gussing_game
	PUBLIC	acknowledgement
	PUBLIC	mode3
	PUBLIC	mode2
	PUBLIC	mode1
	PUBLIC	begin_select
	PUBLIC	mode_select
	PUBLIC	main_menu
	PUBLIC	?guess_one_level?BIT
	PUBLIC	guess_one_level
	PUBLIC	guess_once
	PUBLIC	lose
	PUBLIC	win
	PUBLIC	error
	PUBLIC	correct
	PUBLIC	check_digits

	RSEG  ?DT?guess_once?GUESSING_GAME
?guess_once?BYTE:
      state?543:   DS   1

	RSEG  ?BI?guess_once?GUESSING_GAME
?guess_once?BIT:
          a?541:   DBIT   1
	ORG  1
       temp?542:   DBIT   1

	RSEG  ?BI?guess_one_level?GUESSING_GAME
?guess_one_level?BIT:
          b?644:   DBIT   1
	ORG  1
          a?645:   DBIT   1

	RSEG  ?DT?mode1?GUESSING_GAME
?mode1?BYTE:
         i?1049:   DS   1
	ORG  1
     state?1050:   DS   1

	RSEG  ?XD?GUESSING_GAME
level_display_time:   DS   20
     level_bits:   DS   10
  random_digits:   DS   64

	RSEG  ?DT?GUESSING_GAME
   display_time:   DS   2
           bits:   DS   1

	RSEG  ?CO?GUESSING_GAME
digits:
	DB  '0' ,'1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9' 
	DB  'A' ,'B' ,'C' ,'D' ,'E' ,'F' ,000H



	RSEG  ?C_INITSEG
	DB	060H
	DB	040H
	DW	random_digits
	DB	000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB  000H,000H,000H


	DB	001H
	DB	bits
	DB	000H

	DB	002H
	DB	display_time
	DW	00000H

	DB	04AH
	DW	level_bits
	DB	001H
	DB	002H
	DB	003H
	DB	004H
	DB	005H
	DB	006H
	DB	007H
	DB	008H
	DB	009H
	DB	00AH

	DB	054H
	DW	level_display_time
	DW	000C8H
	DW	00190H
	DW	00258H
	DW	00320H
	DW	003E8H
	DW	004B0H
	DW	00578H
	DW	00640H
	DW	00708H
	DW	007D0H

; #include "guessing_game.h" //包含猜数游戏相关的头文件
; unsigned char code digits[]="0123456789ABCDEF"; //定义一个常量数组digits，用来存储16进制的数字的ASCII码
; unsigned char xdata random_digits[64]={0}; //定义一个扩展数据数组random_digits，用来存储随机的数字，初始化为全0
; unsigned char bits=0; //定义一个变量bits，用来存储输入的位数，初始化为0
; unsigned int display_time=0; //定义一个变量display_time，用来存储显示的时间，初始化为0
; unsigned char xdata level_bits[10]={1,2,3,4,5,6,7,8,9,10}; //定义一个扩展数据数组level_bits，用来存储不同关卡的位数
; unsigned int xdata level_display_time[10]={200,400,600,800,1000,1200,1400,1600,1800,2000}; //定义一个扩展数据数组level_display_time，用来存储不同关卡的数据显示时间
; bit check_digits(void) //定义一个函数check_digits，用来检查用户输入的数字是否和随机的数字相同

	RSEG  ?PR?check_digits?GUESSING_GAME
check_digits:
	USING	0
			; SOURCE LINE # 8
; {
			; SOURCE LINE # 9
; 	unsigned char i=0; //定义一个变量i，用来作为数组的索引，初始化为0
			; SOURCE LINE # 10
;---- Variable 'i?040' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
; 	for(i=0;i<64;i++) //循环64次
			; SOURCE LINE # 11
?C0001:
; 	{
			; SOURCE LINE # 12
; 		if(random_digits[i]!=inputs[i]) //如果数组random_digits的第i个元素和数组inputs的第i个元素不相等
			; SOURCE LINE # 13
	MOV  	A,#LOW (inputs)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (inputs)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	A,#LOW (random_digits)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (random_digits)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	CJNE 	A,AR6,?C0002
; 		{
			; SOURCE LINE # 14
; 			break; //跳出循环
			; SOURCE LINE # 15
; 		}
			; SOURCE LINE # 16
; 	}
			; SOURCE LINE # 17
	INC  	R7
	CJNE 	R7,#040H,?C0001
?C0002:
; 	if(i==64) //如果i等于64，表示所有的元素都相等
			; SOURCE LINE # 18
	CJNE 	R7,#040H,?C0005
; 	{
			; SOURCE LINE # 19
; 		return 1; //返回1，表示正确
			; SOURCE LINE # 20
	SETB 	C
	RET  	
; 	}
			; SOURCE LINE # 21
?C0005:
; 	else //否则
; 	{
			; SOURCE LINE # 23
; 		return 0; //返回0，表示错误
			; SOURCE LINE # 24
	CLR  	C
; 	}
			; SOURCE LINE # 25
; }
			; SOURCE LINE # 26
?C0006:
	RET  	
; END OF check_digits

; bit correct(void) //定义一个函数correct，用来显示正确的画面，并等待用户的选择

	RSEG  ?PR?correct?GUESSING_GAME
correct:
	USING	0
			; SOURCE LINE # 27
; {
			; SOURCE LINE # 28
; 	display_correct(); //调用display_correct函数，显示正确的画面
			; SOURCE LINE # 29
	LCALL	display_correct
; 	return f_or_e(); //调用f_or_e函数，返回用户的选择，F表示继续，E表示返回
			; SOURCE LINE # 30
	LJMP 	f_or_e
; END OF correct

; }
; bit error(void) //定义一个函数error，用来显示错误的画面，并等待用户的选择

	RSEG  ?PR?error?GUESSING_GAME
error:
	USING	0
			; SOURCE LINE # 32
; {
			; SOURCE LINE # 33
; 	display_error(); //调用display_error函数，显示错误的画面
			; SOURCE LINE # 34
	LCALL	display_error
; 	return f_or_e(); //调用f_or_e函数，返回用户的选择，F表示重新开始，E表示返回
			; SOURCE LINE # 35
	LJMP 	f_or_e
; END OF error

; }
; bit win(void) //定义一个函数win，用来显示闯关成功的画面，并等待用户的选择

	RSEG  ?PR?win?GUESSING_GAME
win:
	USING	0
			; SOURCE LINE # 37
; {
			; SOURCE LINE # 38
; 	display_win(); //调用display_win函数，显示闯关成功的画面
			; SOURCE LINE # 39
	LCALL	display_win
; 	return f_or_e(); //调用f_or_e函数，返回用户的选择，F表示再次挑战，E表示返回
			; SOURCE LINE # 40
	LJMP 	f_or_e
; END OF win

; }
; bit lose(void) //定义一个函数lose，用来显示闯关失败的画面，并等待用户的选择

	RSEG  ?PR?lose?GUESSING_GAME
lose:
	USING	0
			; SOURCE LINE # 42
; {
			; SOURCE LINE # 43
; 	display_lose(); //调用display_lose函数，显示闯关失败的画面
			; SOURCE LINE # 44
	LCALL	display_lose
; 	return f_or_e(); //调用f_or_e函数，返回用户的选择，F表示再次挑战，E表示返回
			; SOURCE LINE # 45
	LJMP 	f_or_e
; END OF lose

; }
; unsigned char guess_once(void) //定义一个函数guess_once，用来进行一次猜数游戏

	RSEG  ?PR?guess_once?GUESSING_GAME
guess_once:
	USING	0
			; SOURCE LINE # 47
; {
			; SOURCE LINE # 48
; 	bit a,temp; //定义两个位变量a和temp，用来存储检查结果和用户选择
; 	unsigned char state=0; //定义一个变量state，用来存储游戏状态，初始化为0
			; SOURCE LINE # 50
	CLR  	A
	MOV  	state?543,A
; 	display_random_digits(); //调用display_random_digits函数，显示随机的数字
			; SOURCE LINE # 51
	LCALL	display_random_digits
; 	display_input(); //调用display_input函数，显示输入的画面
			; SOURCE LINE # 52
	LCALL	display_input
; 	state=input_digits(); //调用input_digits函数，输入数字，并赋值给state
			; SOURCE LINE # 53
	LCALL	input_digits
	CLR  	A
	RLC  	A
	MOV  	state?543,A
; 	if(state==1) //如果state等于1，表示用户选择返回
			; SOURCE LINE # 54
	CJNE 	A,#01H,?C0012
; 	{
			; SOURCE LINE # 55
; 		return state; //返回state
			; SOURCE LINE # 56
	MOV  	R7,A
	RET  	
; 	}
			; SOURCE LINE # 57
?C0012:
; 	a=check_digits(); //调用check_digits函数，检查数字是否正确，并赋值给a
			; SOURCE LINE # 58
	LCALL	check_digits
	MOV  	a?541,C
; 	if(a==1) //如果a等于1，表示正确
			; SOURCE LINE # 59
	JNB  	a?541,?C0014
; 	{
			; SOURCE LINE # 60
; 		temp=correct(); //调用correct函数，显示正确的画面，并赋值给temp
			; SOURCE LINE # 61
	LCALL	correct
	MOV  	temp?542,C
; 		if(temp) //如果temp为真，表示用户选择返回
			; SOURCE LINE # 62
	JNB  	temp?542,?C0015
; 		{
			; SOURCE LINE # 63
; 			state=1; //将state赋值为1
			; SOURCE LINE # 64
; 			return state; //返回state
			; SOURCE LINE # 65
	SJMP 	?C0094
; 		}
			; SOURCE LINE # 66
?C0015:
; 		return 0; //否则返回0，表示继续游戏
			; SOURCE LINE # 67
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 68
?C0014:
; 	else //如果a等于0，表示错误
; 	{
			; SOURCE LINE # 70
; 		temp=error(); //调用error函数，显示错误的画面，并赋值给temp
			; SOURCE LINE # 71
	LCALL	error
	MOV  	temp?542,C
; 		if(temp) //如果temp为真，表示用户选择返回
			; SOURCE LINE # 72
	JNB  	temp?542,?C0017
; 		{
			; SOURCE LINE # 73
; 			state=1; //将state赋值为1
			; SOURCE LINE # 74
?C0094:
	MOV  	state?543,#01H
; 			return state; //返回state
			; SOURCE LINE # 75
	MOV  	R7,state?543
	RET  	
; 		}
			; SOURCE LINE # 76
?C0017:
; 		return 2; //否则返回2，表示重新开始
			; SOURCE LINE # 77
	MOV  	R7,#02H
; 	}
			; SOURCE LINE # 78
; }
			; SOURCE LINE # 79
?C0013:
	RET  	
; END OF guess_once

; unsigned char guess_one_level(bit b) //定义一个函数guess_one_level，传入一个位变量b，用来进行一次闯关游戏

	RSEG  ?PR?guess_one_level?GUESSING_GAME
guess_one_level:
	USING	0
			; SOURCE LINE # 80
; {
			; SOURCE LINE # 81
; 	bit a; //定义一个位变量a，用来存储检查结果
; 	unsigned char state=0; //定义一个变量state，用来存储游戏状态，初始化为0
			; SOURCE LINE # 83
;---- Variable 'state?646' assigned to Register 'R5' ----
	CLR  	A
	MOV  	R5,A
; 	display_random_digits(); //调用display_random_digits函数，显示随机的数字
			; SOURCE LINE # 84
	LCALL	display_random_digits
; 	display_input(); //调用display_input函数，显示输入的画面
			; SOURCE LINE # 85
	LCALL	display_input
; 	state=input_digits(); //调用input_digits函数，输入数字，并赋值给state
			; SOURCE LINE # 86
	LCALL	input_digits
	CLR  	A
	RLC  	A
	MOV  	R5,A
; 	if(state==1) //如果state等于1，表示用户选择返回
			; SOURCE LINE # 87
	CJNE 	R5,#01H,?C0018
; 	{
			; SOURCE LINE # 88
; 		return state; //返回state
			; SOURCE LINE # 89
	MOV  	R7,A
	RET  	
; 	}
			; SOURCE LINE # 90
?C0018:
; 	a=check_digits(); //调用check_digits函数，检查数字是否正确，并赋值给a
			; SOURCE LINE # 91
	LCALL	check_digits
	MOV  	a?645,C
; 	if(a==1) //如果a等于1，表示正确
			; SOURCE LINE # 92
	JNB  	a?645,?C0020
; 	{
			; SOURCE LINE # 93
; 		if(b==0) //如果b等于0，表示不是最后一关
			; SOURCE LINE # 94
	JB   	b?644,?C0021
; 		{
			; SOURCE LINE # 95
; 			state=correct(); //调用correct函数，显示正确的画面，并赋值给state
			; SOURCE LINE # 96
	LCALL	correct
	CLR  	A
	RLC  	A
	MOV  	R5,A
; 			if(state==1) //如果state等于1，表示用户选择返回
			; SOURCE LINE # 97
	CJNE 	R5,#01H,?C0022
; 			{
			; SOURCE LINE # 98
; 				return state; //返回state
			; SOURCE LINE # 99
	MOV  	R7,A
	RET  	
; 			}
			; SOURCE LINE # 100
?C0022:
; 			else //否则
; 			{
			; SOURCE LINE # 102
; 				return 2; //返回2，表示继续游戏
			; SOURCE LINE # 103
	MOV  	R7,#02H
	RET  	
; 			}
			; SOURCE LINE # 104
; 		}
			; SOURCE LINE # 105
?C0021:
; 		else //如果b等于1，表示是最后一关
; 		{
			; SOURCE LINE # 107
; 			state=win(); //调用win函数，显示闯关成功的画面，并赋值给state
			; SOURCE LINE # 108
	LCALL	win
	CLR  	A
	RLC  	A
	MOV  	R5,A
; 			if(state==1) //如果state等于1，表示用户选择返回
			; SOURCE LINE # 109
	CJNE 	R5,#01H,?C0025
; 			{
			; SOURCE LINE # 110
; 				return state; //返回state
			; SOURCE LINE # 111
	MOV  	R7,A
	RET  	
; 			}
			; SOURCE LINE # 112
?C0025:
; 			else //否则
; 			{
			; SOURCE LINE # 114
; 				return 0; //返回0，表示再次挑战
			; SOURCE LINE # 115
	MOV  	R7,#00H
	RET  	
; 			}
			; SOURCE LINE # 116
; 		}
			; SOURCE LINE # 117
; 	}
			; SOURCE LINE # 118
?C0020:
; 	else //如果a等于0，表示错误
; 	{
			; SOURCE LINE # 120
; 		state=lose(); //调用lose函数，显示闯关失败的画面，并赋值给state
			; SOURCE LINE # 121
	LCALL	lose
	CLR  	A
	RLC  	A
; 		return state; //返回state
			; SOURCE LINE # 122
	MOV  	R7,A
; 	}
			; SOURCE LINE # 123
; }
			; SOURCE LINE # 124
?C0019:
	RET  	
; END OF guess_one_level

; unsigned char main_menu(void) //定义一个函数main_menu，用来显示主菜单，并返回用户的选择

	RSEG  ?PR?main_menu?GUESSING_GAME
main_menu:
	USING	0
			; SOURCE LINE # 125
; {
			; SOURCE LINE # 126
; 	unsigned char temp; //定义一个变量temp，用来存储用户的选择
; 	display_main_menu(); //调用display_main_menu函数，显示主菜单
			; SOURCE LINE # 128
	LCALL	display_main_menu
?C0028:
; 	while(1) //无限循环
			; SOURCE LINE # 129
; 	{
			; SOURCE LINE # 130
; 		temp=kscan(); //调用kscan函数，扫描键盘输入，并赋值给temp
			; SOURCE LINE # 131
	LCALL	kscan
;---- Variable 'temp?747' assigned to Register 'R7' ----
; 		if(temp==0|temp==1|temp==14) //如果temp等于0或1或14，表示有效的选择
			; SOURCE LINE # 132
	CJNE 	R7,#01H,?C0031
	MOV  	R6,#01H
	SJMP 	?C0032
?C0031:
	MOV  	R6,#00H
?C0032:
	MOV  	A,R7
	JNZ  	?C0033
	MOV  	R5,#01H
	SJMP 	?C0034
?C0033:
	MOV  	R5,#00H
?C0034:
	MOV  	A,R5
	ORL  	A,R6
	MOV  	R6,A
	CJNE 	R7,#0EH,?C0035
	MOV  	R5,#01H
	SJMP 	?C0036
?C0035:
	MOV  	R5,#00H
?C0036:
	MOV  	A,R5
	ORL  	A,R6
	JZ   	?C0028
; 		{
			; SOURCE LINE # 133
; 			break; //跳出循环
			; SOURCE LINE # 134
; 		}
			; SOURCE LINE # 135
; 	}
			; SOURCE LINE # 136
?C0029:
; 	return temp; //返回temp
			; SOURCE LINE # 137
; }
			; SOURCE LINE # 138
	RET  	
; END OF main_menu

; unsigned char mode_select(void) //定义一个函数mode_select，用来显示模式选择，并返回用户的选择

	RSEG  ?PR?mode_select?GUESSING_GAME
mode_select:
	USING	0
			; SOURCE LINE # 139
; {
			; SOURCE LINE # 140
; 	unsigned char temp; //定义一个变量temp，用来存储用户的选择
; 	display_mode_select(); //调用display_mode_select函数，显示模式选择
			; SOURCE LINE # 142
	LCALL	display_mode_select
?C0038:
; 	while(1) //无限循环
			; SOURCE LINE # 143
; 	{
			; SOURCE LINE # 144
; 		temp=kscan(); //调用kscan函数，扫描键盘输入，并赋值给temp
			; SOURCE LINE # 145
	LCALL	kscan
;---- Variable 'temp?848' assigned to Register 'R7' ----
; 		if(temp==0|temp==1|temp==2|temp==14) //如果temp等于0或1或2或14，表示有效的选择
			; SOURCE LINE # 146
	CJNE 	R7,#01H,?C0041
	MOV  	R6,#01H
	SJMP 	?C0042
?C0041:
	MOV  	R6,#00H
?C0042:
	MOV  	A,R7
	JNZ  	?C0043
	MOV  	R5,#01H
	SJMP 	?C0044
?C0043:
	MOV  	R5,#00H
?C0044:
	MOV  	A,R5
	ORL  	A,R6
	MOV  	R6,A
	CJNE 	R7,#02H,?C0045
	MOV  	R5,#01H
	SJMP 	?C0046
?C0045:
	MOV  	R5,#00H
?C0046:
	MOV  	A,R5
	ORL  	A,R6
	MOV  	R6,A
	CJNE 	R7,#0EH,?C0047
	MOV  	R5,#01H
	SJMP 	?C0048
?C0047:
	MOV  	R5,#00H
?C0048:
	MOV  	A,R5
	ORL  	A,R6
	JZ   	?C0038
; 		{
			; SOURCE LINE # 147
; 			break; //跳出循环
			; SOURCE LINE # 148
; 		}
			; SOURCE LINE # 149
; 	}
			; SOURCE LINE # 150
?C0039:
; 	return temp; //返回temp
			; SOURCE LINE # 151
; }
			; SOURCE LINE # 152
	RET  	
; END OF mode_select

; bit begin_select(void) //定义一个函数begin_select，用来显示开始选择，并返回用户的选择

	RSEG  ?PR?begin_select?GUESSING_GAME
begin_select:
	USING	0
			; SOURCE LINE # 153
; {
			; SOURCE LINE # 154
; 	display_begin_select(); //调用display_begin_select函数，显示开始选择
			; SOURCE LINE # 155
	LCALL	display_begin_select
; 	return f_or_e(); //调用f_or_e函数，返回用户的选择，F表示开始游戏，E表示返回
			; SOURCE LINE # 156
	LJMP 	f_or_e
; END OF begin_select

; }
; void mode1(void) //定义一个函数mode1，用来进行闯关模式的游戏

	RSEG  ?PR?mode1?GUESSING_GAME
mode1:
	USING	0
			; SOURCE LINE # 158
; {
			; SOURCE LINE # 159
; 	unsigned char i=0; //定义一个变量i，用来作为关卡的索引，初始化为0
			; SOURCE LINE # 160
	CLR  	A
	MOV  	i?1049,A
?C0051:
; 	unsigned char state; //定义一个变量state，用来存储游戏状态
; 	while(1) //无限循环
			; SOURCE LINE # 162
; 	{
			; SOURCE LINE # 163
; 	for(i=0;i<10;i++) //循环10次，表示10个关卡
			; SOURCE LINE # 164
	CLR  	A
	MOV  	i?1049,A
?C0053:
; 	{
			; SOURCE LINE # 165
; 		bits=level_bits[i]; //将数组level_bits的第i个元素赋值给bits，表示当前关卡的位数
			; SOURCE LINE # 166
	MOV  	A,#LOW (level_bits)
	ADD  	A,i?1049
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (level_bits)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	bits,A
; 		display_time=level_display_time[i]; //将数组level_display_time的第i个元素赋值给display_time，表示当前关卡的显示时间
			; SOURCE LINE # 167
	MOV  	A,i?1049
	ADD  	A,ACC
	ADD  	A,#LOW (level_display_time)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (level_display_time)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	display_time,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	display_time+01H,A
; 		if(begin_select()) //调用begin_select函数，显示开始选择，并判断用户的选择
			; SOURCE LINE # 168
	LCALL	begin_select
	JC   	?C0057
; 		{
			; SOURCE LINE # 169
; 			return; //如果用户选择返回，结束函数
; 		}
			; SOURCE LINE # 171
; 		state=guess_one_level(i==9); //调用guess_one_level函数，传入i是否等于9，表示是否是最后一关，并赋值给state
			; SOURCE LINE # 172
	MOV  	A,i?1049
	CJNE 	A,#09H,?C0058
	SETB 	C
	SJMP 	?C0059
?C0058:
	CLR  	C
?C0059:
	MOV  	?guess_one_level?BIT,C
	LCALL	guess_one_level
	MOV  	state?1050,R7
; 		if(state==1) //如果state等于1，表示用户选择返回
			; SOURCE LINE # 173
	MOV  	A,state?1050
	XRL  	A,#01H
	JZ   	?C0057
; 		{		
			; SOURCE LINE # 174
; 			return; //结束函数
; 		}
			; SOURCE LINE # 176
; 		if(state==0) //如果state等于0，表示用户选择再次挑战
			; SOURCE LINE # 177
	MOV  	A,state?1050
	JZ   	?C0051
; 		{		
			; SOURCE LINE # 178
; 			break; //跳出循环，重新开始游戏
			; SOURCE LINE # 179
; 		}
			; SOURCE LINE # 180
; 	}
			; SOURCE LINE # 181
	INC  	i?1049
	MOV  	A,i?1049
	CLR  	C
	SUBB 	A,#0AH
	JC   	?C0053
	SJMP 	?C0051
; 	}
			; SOURCE LINE # 182
; }
			; SOURCE LINE # 183
?C0057:
	RET  	
; END OF mode1

; void mode2(void) //定义一个函数mode2，用来进行练习模式的游戏

	RSEG  ?PR?mode2?GUESSING_GAME
mode2:
	USING	0
			; SOURCE LINE # 184
; {
			; SOURCE LINE # 185
; 	while(1) //无限循环
			; SOURCE LINE # 186
; 	{
			; SOURCE LINE # 187
; 	display_bits_select(); //调用display_bits_select函数，显示位数选择
			; SOURCE LINE # 188
	LCALL	display_bits_select
; 	if(input_bits()==1) //调用input_bits函数，输入位数，并判断返回值
			; SOURCE LINE # 189
	LCALL	input_bits
	JC   	?C0065
; 	{
			; SOURCE LINE # 190
; 		return; //如果返回1，表示用户选择返回，结束函数
; 	}
			; SOURCE LINE # 192
; 	display_time_select(); //调用display_time_select函数，显示时间选择
			; SOURCE LINE # 193
	LCALL	display_time_select
; 	if(input_display_time()==1) //调用input_display_time函数，输入时间，并判断返回值
			; SOURCE LINE # 194
	LCALL	input_display_time
	JC   	?C0065
; 	{
			; SOURCE LINE # 195
; 		return; //如果返回1，表示用户选择返回，结束函数
; 	}
			; SOURCE LINE # 197
; 	display_begin_select(); //调用display_begin_select函数，显示开始选择
			; SOURCE LINE # 198
	LCALL	display_begin_select
?C0067:
; 	while(1) //无限循环
			; SOURCE LINE # 199
; 	{
			; SOURCE LINE # 200
; 	if(begin_select()) //调用begin_select函数，显示开始选择，并判断用户的选择
			; SOURCE LINE # 201
	LCALL	begin_select
	JC   	?C0065
; 	{
			; SOURCE LINE # 202
; 		return; //如果用户选择返回，结束函数
; 	}
			; SOURCE LINE # 204
; 	if(guess_once()==1) //调用guess_once函数，进行一次猜数游戏，并判断返回值
			; SOURCE LINE # 205
	LCALL	guess_once
	CJNE 	R7,#01H,?C0067
; 	{		
			; SOURCE LINE # 206
; 		return; //如果返回1，表示用户选择返回，结束函数
; 	}
			; SOURCE LINE # 208
; 	}
			; SOURCE LINE # 209
; 	}
			; SOURCE LINE # 210
; }
			; SOURCE LINE # 211
?C0065:
	RET  	
; END OF mode2

; void mode3(void) //定义一个函数mode3，用来进行随机模式的游戏

	RSEG  ?PR?mode3?GUESSING_GAME
mode3:
	USING	0
			; SOURCE LINE # 212
; {
			; SOURCE LINE # 213
?C0071:
; 	while(1) //无限循环
			; SOURCE LINE # 214
; 	{
			; SOURCE LINE # 215
; 	bits=1+rand()%8; //将1加上0到7的随机数赋值给bits，表示随机的位数
			; SOURCE LINE # 216
	LCALL	rand
	MOV  	R4,#00H
	MOV  	R5,#08H
	LCALL	?C?SIDIV
	MOV  	A,R5
	INC  	A
	MOV  	bits,A
; 	display_time=bits*200+rand()%101; //将bits乘以200加上0到100的随机数赋值给display_time，表示随机的显示时间
			; SOURCE LINE # 217
	LCALL	rand
	MOV  	R4,#00H
	MOV  	R5,#065H
	LCALL	?C?SIDIV
	MOV  	A,bits
	MOV  	B,#0C8H
	MUL  	AB
	MOV  	R6,B
	ADD  	A,R5
	MOV  	display_time+01H,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	display_time,A
; 	if(begin_select()) //调用begin_select函数，显示开始选择，并判断用户的选择
			; SOURCE LINE # 218
	LCALL	begin_select
	JC   	?C0074
; 	{
			; SOURCE LINE # 219
; 		return; //如果用户选择返回，结束函数
; 	}
			; SOURCE LINE # 221
; 	if(guess_once()==1) //调用guess_once函数，进行一次猜数游戏，并判断返回值
			; SOURCE LINE # 222
	LCALL	guess_once
	CJNE 	R7,#01H,?C0071
; 	{		
			; SOURCE LINE # 223
; 		return; //如果返回1，表示用户选择返回，结束函数
; 	}
			; SOURCE LINE # 225
; 	}
			; SOURCE LINE # 226
; }
			; SOURCE LINE # 227
?C0074:
	RET  	
; END OF mode3

; void acknowledgement(void) //定义一个函数acknowledgement，用来显示致谢的画面

	RSEG  ?PR?acknowledgement?GUESSING_GAME
acknowledgement:
	USING	0
			; SOURCE LINE # 228
; {
			; SOURCE LINE # 229
; 	display_acknowledgement(); //调用display_acknowledgement函数，显示致谢的画面
			; SOURCE LINE # 230
	LJMP 	display_acknowledgement
; END OF acknowledgement

; }
; void gussing_game(void) //定义一个函数gussing_game，用来进行猜数游戏

	RSEG  ?PR?gussing_game?GUESSING_GAME
gussing_game:
	USING	0
			; SOURCE LINE # 232
; {
			; SOURCE LINE # 233
?C0077:
; 	unsigned char mode; //定义一个变量mode，用来存储游戏模式
; 	while(1) //无限循环
			; SOURCE LINE # 235
; 	{
			; SOURCE LINE # 236
; 		mode=mode_select(); //调用mode_select函数，显示模式选择，并赋值给mode
			; SOURCE LINE # 237
	LCALL	mode_select
;---- Variable 'mode?1451' assigned to Register 'R7' ----
; 		if(mode==14) //如果mode等于14，表示用户选择返回
			; SOURCE LINE # 238
	MOV  	A,R7
	XRL  	A,#0EH
	JZ   	?C0085
; 		{
			; SOURCE LINE # 239
; 			break; //跳出循环
			; SOURCE LINE # 240
; 		}	
			; SOURCE LINE # 241
; 		switch(mode) //根据mode的值选择不同的分支
			; SOURCE LINE # 242
	MOV  	A,R7
	DEC  	A
	JZ   	?C0082
	DEC  	A
	JZ   	?C0083
	ADD  	A,#02H
	JNZ  	?C0077
; 		{
			; SOURCE LINE # 243
; 			case 0: 
			; SOURCE LINE # 244
?C0081:
; 				mode1(); //如果mode等于0，调用mode1函数，进行闯关模式的游戏
			; SOURCE LINE # 245
	LCALL	mode1
; 				break;
			; SOURCE LINE # 246
	SJMP 	?C0077
; 			case 1: 
			; SOURCE LINE # 247
?C0082:
; 				mode2(); //如果mode等于1，调用mode2函数，进行练习模式的游戏
			; SOURCE LINE # 248
	LCALL	mode2
; 				break;
			; SOURCE LINE # 249
	SJMP 	?C0077
; 			case 2: 
			; SOURCE LINE # 250
?C0083:
; 				mode3(); //如果mode等于2，调用mode3函数，进行随机模式的游戏
			; SOURCE LINE # 251
	LCALL	mode3
; 				break;
			; SOURCE LINE # 252
	SJMP 	?C0077
; 			default:
			; SOURCE LINE # 253
; 				break;
			; SOURCE LINE # 254
; 		}
			; SOURCE LINE # 255
; 	}
			; SOURCE LINE # 256
; }
			; SOURCE LINE # 257
?C0085:
	RET  	
; END OF gussing_game

; void games(void) //定义一个函数games，用来进行游戏

	RSEG  ?PR?games?GUESSING_GAME
games:
	USING	0
			; SOURCE LINE # 258
; {
			; SOURCE LINE # 259
; 	unsigned char menu; //定义一个变量menu，用来存储主菜单的选择
; 	display_gussing_game(); //调用display_gussing_game函数，显示猜数游戏的LOGO
			; SOURCE LINE # 261
	LCALL	display_gussing_game
?C0086:
; 	while(1) //无限循环
			; SOURCE LINE # 262
; 	{
			; SOURCE LINE # 263
; 		menu=main_menu(); //调用main_menu函数，显示主菜单，并赋值给menu
			; SOURCE LINE # 264
	LCALL	main_menu
;---- Variable 'menu?1552' assigned to Register 'R7' ----
; 		if(menu==14) //如果menu等于14，表示用户选择退出
			; SOURCE LINE # 265
	MOV  	A,R7
	XRL  	A,#0EH
	JZ   	?C0093
; 		{
			; SOURCE LINE # 266
; 			break; //跳出循环
			; SOURCE LINE # 267
; 		}	
			; SOURCE LINE # 268
; 	switch(menu) //根据menu的值选择不同的分支
			; SOURCE LINE # 269
	MOV  	A,R7
	DEC  	A
	JZ   	?C0091
	INC  	A
	JNZ  	?C0086
; 	{
			; SOURCE LINE # 270
; 		case 0: 
			; SOURCE LINE # 271
?C0090:
; 			gussing_game(); //如果menu等于0，调用gussing_game函数，进行猜数游戏
			; SOURCE LINE # 272
	LCALL	gussing_game
; 			break;
			; SOURCE LINE # 273
	SJMP 	?C0086
; 		case 1: 
			; SOURCE LINE # 274
?C0091:
; 			acknowledgement(); //如果menu等于1，调用acknowledgement函数，显示致谢的画面
			; SOURCE LINE # 275
	LCALL	acknowledgement
; 			break;
			; SOURCE LINE # 276
	SJMP 	?C0086
; 		default:
			; SOURCE LINE # 277
; 			break;
			; SOURCE LINE # 278
; 	}
			; SOURCE LINE # 279
; 	}
			; SOURCE LINE # 280
; }
			; SOURCE LINE # 281
?C0093:
	RET  	
; END OF games

	END
